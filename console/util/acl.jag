<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

authenticationUtil = new function(){
    var log = new Log();
};

authorizationUtil = new function(){
    var log = new Log();

    // primitive acl impl.
    this.isAllowed = function(tenant,roleObj,resource){
        var aclconfig = require('/config/acl.json');
        if(tenant == null){ // check for undefine as well
            return false;
        }else if(tenant == "carbon.super"){
            return this.checkPermission(roleObj,aclconfig.carbonsuper,resource);
        }else{
            return this.checkPermission(roleObj,aclconfig.tenants,resource);
        }

        return false;
    };
    // user roles: {[admin,Internal]}
    // permission config :
    //    "admin": ["view", "edit", "add_tenant", "tenant-edit"],
    //        "everyone": ["view", "tenant-edit"]
    //}
    this.checkPermission = function(roleArray, permissionConfig, resource) {
        for(var i=0; i < roleArray.length; i++){
            for(var permissionKey in permissionConfig) {
                if(permissionKey == roleArray[i]){
                    var permissionArray = permissionConfig[permissionKey];
                    for(var i=0;i< permissionArray.length;i++){
                        if(resource != null && resource == permissionArray[i]){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };

    this.getPermissionObj = function(tenant,roleArray) {
        var aclconfig = require('/config/acl.json');
        if(tenant == null){ // check for undefine as well
            return false;
        }else if(tenant == "carbon.super"){
            return this.getUnionOfPermissions(roleArray,aclconfig.carbonsuper);
        }else{
            return this.getUnionOfPermissions(roleArray,aclconfig.tenants);
        }
    };

    this.getUnionOfPermissions = function(roleArray,permissionConfig) {   // i dont like these methods. O(n^4) :((
        var permObj = {};
        for(var i=0; i < roleArray.length; i++){
            for(var permissionKey in permissionConfig) {
                if(permissionKey == roleArray[i]){
                    var permissionArray = permissionConfig[permissionKey];
                    for(var j=0;j< permissionArray.length;j++){
                        if(!permObj[permissionArray[j]]){
                            permObj[permissionArray[j]] = true;
                        }
                    }
                }
            }
        }
        return permObj;
    };
};

//var testLog = new Log();
//testLog.info(authorizationUtil.getPermissionObj("carbon.super",["admin"]));
//testLog.info(authorizationUtil.isAllowed("pradeep.org",["admin","Internal/Everyone"],"edit"));
//testLog.info(authorizationUtil.isAllowed("pradeep.org",["admin","Internal/Everyone"],"tenant-edit"));
//testLog.info(authorizationUtil.isAllowed("test.org",["Internal/Everyone"],"view"));
//testLog.info(authorizationUtil.isAllowed("someorg.com",["admin","Internal/Everyone"],"view"));

%>
